point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
w <- function(x) {
return(x)
}
w(7)
minkowski(point1, point2, p = 1)
minkowski(point1, point2, p = 'max')
minkowski(point1, point2, p = 1)
minkowski(point1, point2, p = 'max')
minkowski(point1, point2, p = 1)
minkowski(point1, point2, p = 'max')
minkowski <- function(x, y, p=1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
} else if (is.numeric(p)) {
if (p < 1) {
stop("p cannot be less than 1")
}
} else if (is.character(p)) {
if (p != "max") {
stop("invalid character value for p")
}
} else if (p == "max") {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
value <- max(abs_xy_vec)
return(value)
} else {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
return(summation^(1/p))
}
}
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
w <- function(x) {
return(x)
}
w(7)
minkowski(point1, point2, p = 1)
minkowski(point1, point2, p = 'max')
minkowski(point1, point2, p = 1)
minkowski(point1, point2, p = 'max')
count_vowels <- function(x) {
if (!is.character(x)) {
stop("invalid input; string was expected")
} else {
x <- tolower(strsplit(x, "")[[1]])
x <- x[x %in% letters]
return(table(x)[c("a", "e", "i", "o", "u")])
}
}
pets <- "step on no pets"
ep <- "expecto patronum"
pe <- "munortap otcepxe"
car_cat <- "Was it a car or a cat I saw?"
tac_rac <- "?was I tac a ro rac a ti saW"
reverse_chars(pets)
fox <- "The quick brown fox jumps over the lazy dog"
FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
do <- "do or do not"
count_vowels(fox)
fox <- "The quick brown fox jumps over the lazy dog"
FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
do <- "do or do not"
as.vector(count_vowels(fox))
# This is a master script to test all functions in with workout2 folder
# Those functions are minkowski(), is_hex(), is_hex_alpha(),
# reverse_chars(), and count_vowels
library('testthat')
library('stringr')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
count_vowels <- function(x) {
if (!is.character(x)) {
stop("invalid input; string was expected")
} else {
x <- tolower(strsplit(x, "")[[1]])
x <- x[x %in% letters]
return(unlist(table(x)[c("a", "e", "i", "o", "u")]))
}
}
fox <- "The quick brown fox jumps over the lazy dog"
FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
do <- "do or do not"
as.vector(count_vowels(fox))
fox <- "The quick brown fox jumps over the lazy dog"
FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
do <- "do or do not"
count_vowels(fox)
count_vowels <- function(x) {
if (!is.character(x)) {
stop("invalid input; string was expected")
} else {
x <- tolower(strsplit(x, "")[[1]])
x <- x[x %in% letters]
return(unlist(table(x)[c("a", "e", "i", "o", "u")]))
}
}
fox <- "The quick brown fox jumps over the lazy dog"
FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
do <- "do or do not"
count_vowels(fox)
# This is a master script to test all functions in with workout2 folder
# Those functions are minkowski(), is_hex(), is_hex_alpha(),
# reverse_chars(), and count_vowels
library('testthat')
library('stringr')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
#fox <- "The quick brown fox jumps over the lazy dog"
#FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
#do <- "do or do not"
#count_vowels(fox)
hello <- c("h" = 1, "e" = 4)
names(hello)
count_vowels <- function(x) {
if (!is.character(x)) {
stop("invalid input; string was expected")
} else {
x <- tolower(strsplit(x, "")[[1]])
x <- x[x %in% letters]
vowel_table <- table(x)[c("a", "e", "i", "o", "u")]
return(vowel_table)
}
}
fox <- "The quick brown fox jumps over the lazy dog"
#FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
#do <- "do or do not"
count_vowels(fox)
fox <- "The quick brown fox jumps over the lazy dog"
#FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
#do <- "do or do not"
as.vector(count_vowels(fox))
fox <- "The quick brown fox jumps over the lazy dog"
#FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
#do <- "do or do not"
as.vector(count_vowels(fox))[1]
count_vowels <- function(x) {
if (!is.character(x)) {
stop("invalid input; string was expected")
} else {
x <- tolower(strsplit(x, "")[[1]])
x <- x[x %in% letters]
vowel_table <- table(x)[c("a", "e", "i", "o", "u")]
counts <- as.vector(vowel_table)
return(c("a"=counts[1], "e"=counts[2], "i"=counts[3], "o"=counts[4], "u"=counts[5]))
}
}
fox <- "The quick brown fox jumps over the lazy dog"
#FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
#do <- "do or do not"
as.vector(count_vowels(fox))[1]
fox <- "The quick brown fox jumps over the lazy dog"
#FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
#do <- "do or do not"
count_vowels(fox)
# This is a master script to test all functions in with workout2 folder
# Those functions are minkowski(), is_hex(), is_hex_alpha(),
# reverse_chars(), and count_vowels
library('testthat')
library('stringr')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
count_vowels <- function(x) {
if (!is.character(x)) {
stop("invalid input; string was expected")
} else {
x <- tolower(strsplit(x, "")[[1]])
x <- x[x %in% letters]
vowel_table <- table(x)[c("a", "e", "i", "o", "u")]
counts <- as.vector(vowel_table)
return(c("a"=counts[1], "e"=counts[2], "i"=counts[3], "o"=counts[4], "u"=counts[5]))
}
}
tester<-as.double(c("a"=1, "b"=2, "c"=3, "d"=4, "e"5))
count_vowels <- function(x) {
if (!is.character(x)) {
stop("invalid input; string was expected")
} else {
x <- tolower(strsplit(x, "")[[1]])
x <- x[x %in% letters]
vowel_table <- table(x)[c("a", "e", "i", "o", "u")]
counts <- as.vector(vowel_table)
return(c("a"=counts[1], "e"=counts[2], "i"=counts[3], "o"=counts[4], "u"=counts[5]))
}
}
tester<-as.double(c("a"=1, "b"=2, "c"=3, "d"=4, "e"=5))
tester
# This is a master script to test all functions in with workout2 folder
# Those functions are minkowski(), is_hex(), is_hex_alpha(),
# reverse_chars(), and count_vowels
library('testthat')
library('stringr')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
minkowski <- function(x, y, p=1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
} else if (is.numeric(p) & p < 1) {
stop("p cannot be less than 1")
} else if (is.character(p) & p != "max") {
stop("invalid character value for p")
} else if (p == "max") {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
value <- max(abs_xy_vec)
return(value)
} else {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
return(summation^(1/p))
}
}
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
minkowski(point1, point2, p = 1)
minkowski <- function(x, y, p=1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
} else if (is.numeric(p) & p < 1) {
stop("p cannot be less than 1")
} else if (is.character(p) & p != "max") {
stop("invalid character value for p")
} else if (p == "max") {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
value <- max(abs_xy_vec)
return(value)
} else {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
return(sum(abc_xy_vec)^(1/p))
}
}
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
minkowski(point1, point2, p = 1)
minkowski <- function(x, y, p=1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
} else if (is.numeric(p) & p < 1) {
stop("p cannot be less than 1")
} else if (is.character(p) & p != "max") {
stop("invalid character value for p")
} else if (p == "max") {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
value <- max(abs_xy_vec)
return(value)
} else {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
return(sum(abc_xy_vec)^(1/p))
}
}
}
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
minkowski(point1, point2, p = 1)
minkowski <- function(x, y, p=1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
} else if (is.numeric(p) & p < 1) {
stop("p cannot be less than 1")
} else if (is.character(p) & p != "max") {
stop("invalid character value for p")
} else if (p == "max") {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
value <- max(abs_xy_vec)
return(value)
} else {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
return(sum(abs_xy_vec)^(1/p))
}
}
}
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
minkowski(point1, point2, p = 1)
minkowski(point1, point2, p = 'max')
# This is a master script to test all functions in with workout2 folder
# Those functions are minkowski(), is_hex(), is_hex_alpha(),
# reverse_chars(), and count_vowels
library('testthat')
library('stringr')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
minkowski(point1, point2, p = 1)
minkowski <- function(x, y, p=1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
} else if (is.numeric(p) & p < 1) {
stop("p cannot be less than 1")
} else if (is.character(p) & p != "max") {
stop("invalid character value for p")
} else if (p == "max") {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
value <- max(abs_xy_vec)
return(value)
} else {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
return((sum(abs_xy_vec))^(1/p))
}
}
}
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
minkowski(point1, point2, p = 1)
minkowski <- function(x, y, p=1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
} else if (is.numeric(p) & p < 1) {
stop("p cannot be less than 1")
} else if (is.character(p) & p != "max") {
stop("invalid character value for p")
} else if (p == "max") {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
value <- max(abs_xy_vec)
return(value)
} else {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
return(sum(abs_xy_vec))
}
}
}
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
minkowski(point1, point2, p = 1)
minkowski <- function(x, y, p=1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
} else if (is.numeric(p) & p < 1) {
stop("p cannot be less than 1")
} else if (is.character(p) & p != "max") {
stop("invalid character value for p")
} else if (p == "max") {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
value <- max(abs_xy_vec)
return(value)
} else {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
return(abs_xy_vec)
}
}
}
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
minkowski(point1, point2, p = 1)
minkowski <- function(x, y, p=1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
} else if (is.numeric(p) & p < 1) {
stop("p cannot be less than 1")
} else if (is.character(p) & p != "max") {
stop("invalid character value for p")
} else if (p == "max") {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
value <- max(abs_xy_vec)
return(value)
} else {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
return(abs_xy_vec)
}
}
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
minkowski(point1, point2, p = 1)
# This is a master script to test all functions in with workout2 folder
# Those functions are minkowski(), is_hex(), is_hex_alpha(),
# reverse_chars(), and count_vowels
library('testthat')
library('stringr')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
# This is a master script to test all functions in with workout2 folder
# Those functions are minkowski(), is_hex(), is_hex_alpha(),
# reverse_chars(), and count_vowels
library('testthat')
library('stringr')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
minkowski(point1, point3, p = 2)
minkowski <- function(x, y, p=1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
} else if (is.numeric(p) & p < 1) {
stop("p cannot be less than 1")
} else if (is.character(p) & p != "max") {
stop("invalid character value for p")
} else if (p == "max") {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
value <- max(abs_xy_vec)
return(value)
} else {
abs_xy_vec <- rep(0, length(x))
for (i in 1:length(x)) {
abs_xy_vec[i] <- abs(x[i] - y[i])
}
return(abs_xy_vec)
}
}
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
point3
# This is a master script to test all functions in with workout2 folder
# Those functions are minkowski(), is_hex(), is_hex_alpha(),
# reverse_chars(), and count_vowels
library('testthat')
library('stringr')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
